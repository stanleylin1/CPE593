Hash Table 
Inserting O(n) average O(1)
Deleting O(n) average O(1)
Searching O(n) or O(1) if no collision

Linear probing 50% empty
insert/add
add(k) 
    if 2*used >= capacity
        grow()
    end if
    pos = hash(k)
    while table[pos] != EMPTY
        pos = (pos+1) mod table.length
    end
    used++
    table[pos] = k
end

get/find
find(k)
    pos = hash(k)
    while table[pos] != EMPTY
        if table[pos]=k
            return true
        end
        pos++
        if pos >= table.length
            pos=0
        end
    end
    return false
end

Linear chaining
recommended 25%-30% empty spaace
insert/add
add(key)
    pos = hash(key)
    p = table[pos].head
    while p!= null
        if p.key == key
            p.val = val
            return
        p = p.next
    end
    table[pos].addStart(key)
end

get/find
find(key)
    pos = hash(key)
    p = table[pos].head
    while p!= null
        if p.key==key
            return true
        p = p.next
    end
    return false
end

collision counting:
1. traverse each bin
2. count how many in each bin
3. generate histogram

Perfect Hashing
insert/add
add(key)
    pos = hash(key)
    if table[pos]=null
        table[pos] = new Hashing
    end
    do
        table[pos].insert(key)
    while table[pos].hasCollisions
        table[pos].resize()

Hash Function for strings(diff values for palidromes)
hash(s)
    sum = 0
    for i = 0 to length(s)
        sum = (sum << 13) + s[i] + (sum >> 17)

Hash function for pointers(lowest 2-3 bits being zero does not affect val)
    hash(p) = p+p << 3
